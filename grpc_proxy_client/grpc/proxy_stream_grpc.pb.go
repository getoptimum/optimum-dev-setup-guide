// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/proxy_stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyStream_ClientStream_FullMethodName = "/proto.ProxyStream/ClientStream"
)

// ProxyStreamClient is the client API for ProxyStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProxyStream establishes a stream connection to send and receive messages
// between the Optimum Proxy and the clients.
type ProxyStreamClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyMessage, ProxyMessage], error)
}

type proxyStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyStreamClient(cc grpc.ClientConnInterface) ProxyStreamClient {
	return &proxyStreamClient{cc}
}

func (c *proxyStreamClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyMessage, ProxyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyStream_ServiceDesc.Streams[0], ProxyStream_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyMessage, ProxyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyStream_ClientStreamClient = grpc.BidiStreamingClient[ProxyMessage, ProxyMessage]

// ProxyStreamServer is the server API for ProxyStream service.
// All implementations must embed UnimplementedProxyStreamServer
// for forward compatibility.
//
// ProxyStream establishes a stream connection to send and receive messages
// between the Optimum Proxy and the clients.
type ProxyStreamServer interface {
	ClientStream(grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]) error
	mustEmbedUnimplementedProxyStreamServer()
}

// UnimplementedProxyStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyStreamServer struct{}

func (UnimplementedProxyStreamServer) ClientStream(grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedProxyStreamServer) mustEmbedUnimplementedProxyStreamServer() {}
func (UnimplementedProxyStreamServer) testEmbeddedByValue()                     {}

// UnsafeProxyStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyStreamServer will
// result in compilation errors.
type UnsafeProxyStreamServer interface {
	mustEmbedUnimplementedProxyStreamServer()
}

func RegisterProxyStreamServer(s grpc.ServiceRegistrar, srv ProxyStreamServer) {
	// If the following call pancis, it indicates UnimplementedProxyStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyStream_ServiceDesc, srv)
}

func _ProxyStream_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyStreamServer).ClientStream(&grpc.GenericServerStream[ProxyMessage, ProxyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyStream_ClientStreamServer = grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]

// ProxyStream_ServiceDesc is the grpc.ServiceDesc for ProxyStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProxyStream",
	HandlerType: (*ProxyStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ProxyStream_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/proxy_stream.proto",
}
