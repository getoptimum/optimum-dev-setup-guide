// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandStream_ListenCommands_FullMethodName = "/proto.CommandStream/ListenCommands"
	CommandStream_Health_FullMethodName         = "/proto.CommandStream/Health"
	CommandStream_ListTopics_FullMethodName     = "/proto.CommandStream/ListTopics"
)

// CommandStreamClient is the client API for CommandStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CommandStream establish a stream connection to send and receive commands
// between the Optimum Gateway and the p2p node
type CommandStreamClient interface {
	ListenCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error)
	Health(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthResponse, error)
	ListTopics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TopicList, error)
}

type commandStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandStreamClient(cc grpc.ClientConnInterface) CommandStreamClient {
	return &commandStreamClient{cc}
}

func (c *commandStreamClient) ListenCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CommandStream_ServiceDesc.Streams[0], CommandStream_ListenCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandStream_ListenCommandsClient = grpc.BidiStreamingClient[Request, Response]

func (c *commandStreamClient) Health(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CommandStream_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandStreamClient) ListTopics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TopicList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicList)
	err := c.cc.Invoke(ctx, CommandStream_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandStreamServer is the server API for CommandStream service.
// All implementations must embed UnimplementedCommandStreamServer
// for forward compatibility.
//
// CommandStream establish a stream connection to send and receive commands
// between the Optimum Gateway and the p2p node
type CommandStreamServer interface {
	ListenCommands(grpc.BidiStreamingServer[Request, Response]) error
	Health(context.Context, *Void) (*HealthResponse, error)
	ListTopics(context.Context, *Void) (*TopicList, error)
	mustEmbedUnimplementedCommandStreamServer()
}

// UnimplementedCommandStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandStreamServer struct{}

func (UnimplementedCommandStreamServer) ListenCommands(grpc.BidiStreamingServer[Request, Response]) error {
	return status.Errorf(codes.Unimplemented, "method ListenCommands not implemented")
}
func (UnimplementedCommandStreamServer) Health(context.Context, *Void) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCommandStreamServer) ListTopics(context.Context, *Void) (*TopicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedCommandStreamServer) mustEmbedUnimplementedCommandStreamServer() {}
func (UnimplementedCommandStreamServer) testEmbeddedByValue()                       {}

// UnsafeCommandStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandStreamServer will
// result in compilation errors.
type UnsafeCommandStreamServer interface {
	mustEmbedUnimplementedCommandStreamServer()
}

func RegisterCommandStreamServer(s grpc.ServiceRegistrar, srv CommandStreamServer) {
	// If the following call pancis, it indicates UnimplementedCommandStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandStream_ServiceDesc, srv)
}

func _CommandStream_ListenCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandStreamServer).ListenCommands(&grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandStream_ListenCommandsServer = grpc.BidiStreamingServer[Request, Response]

func _CommandStream_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandStreamServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandStream_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandStreamServer).Health(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandStream_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandStreamServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandStream_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandStreamServer).ListTopics(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandStream_ServiceDesc is the grpc.ServiceDesc for CommandStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommandStream",
	HandlerType: (*CommandStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _CommandStream_Health_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _CommandStream_ListTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenCommands",
			Handler:       _CommandStream_ListenCommands_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
