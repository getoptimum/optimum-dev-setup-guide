// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gateway_stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayStream_ClientStream_FullMethodName = "/proto.GatewayStream/ClientStream"
)

// GatewayStreamClient is the client API for GatewayStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GatewayStream establishes a stream connection to send and receive messages
// between the Optimum Gateway and the clients.
type GatewayStreamClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GatewayMessage, GatewayMessage], error)
}

type gatewayStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayStreamClient(cc grpc.ClientConnInterface) GatewayStreamClient {
	return &gatewayStreamClient{cc}
}

func (c *gatewayStreamClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GatewayMessage, GatewayMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayStream_ServiceDesc.Streams[0], GatewayStream_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GatewayMessage, GatewayMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayStream_ClientStreamClient = grpc.BidiStreamingClient[GatewayMessage, GatewayMessage]

// GatewayStreamServer is the server API for GatewayStream service.
// All implementations must embed UnimplementedGatewayStreamServer
// for forward compatibility.
//
// GatewayStream establishes a stream connection to send and receive messages
// between the Optimum Gateway and the clients.
type GatewayStreamServer interface {
	ClientStream(grpc.BidiStreamingServer[GatewayMessage, GatewayMessage]) error
	mustEmbedUnimplementedGatewayStreamServer()
}

// UnimplementedGatewayStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayStreamServer struct{}

func (UnimplementedGatewayStreamServer) ClientStream(grpc.BidiStreamingServer[GatewayMessage, GatewayMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedGatewayStreamServer) mustEmbedUnimplementedGatewayStreamServer() {}
func (UnimplementedGatewayStreamServer) testEmbeddedByValue()                       {}

// UnsafeGatewayStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayStreamServer will
// result in compilation errors.
type UnsafeGatewayStreamServer interface {
	mustEmbedUnimplementedGatewayStreamServer()
}

func RegisterGatewayStreamServer(s grpc.ServiceRegistrar, srv GatewayStreamServer) {
	// If the following call pancis, it indicates UnimplementedGatewayStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayStream_ServiceDesc, srv)
}

func _GatewayStream_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayStreamServer).ClientStream(&grpc.GenericServerStream[GatewayMessage, GatewayMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayStream_ClientStreamServer = grpc.BidiStreamingServer[GatewayMessage, GatewayMessage]

// GatewayStream_ServiceDesc is the grpc.ServiceDesc for GatewayStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GatewayStream",
	HandlerType: (*GatewayStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _GatewayStream_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gateway_stream.proto",
}
